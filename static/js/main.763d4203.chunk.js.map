{"version":3,"sources":["components/CountryInfo/CountryInfo.jsx","App.js","index.js"],"names":["CountryInfo","useState","country","setCountry","isLoading","setIsLoading","error","setError","countryName","useParams","map","borders","useEffect","getCountryByName","fetch","apiURL","res","ok","Error","json","data","message","console","log","className","to","index","src","flags","png","alt","name","common","Intl","NumberFormat","format","population","region","subregion","capital","border","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SA0FeA,EArFK,WAClB,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAEQC,EAAgBC,cAAhBD,YAEQN,EAAQQ,KAAI,SAACR,GAAD,OAAaA,EAAQS,WAsBjD,OApBAC,qBAAU,WACR,IAAMC,EAAgB,iDAAG,yHAEHC,MAAM,GAAD,OAAIC,SAAJ,iBAAmBP,IAFrB,WAEfQ,EAFe,QAIZC,GAJY,sBAIF,IAAIC,MAAM,oBAJR,uBAMFF,EAAIG,OANF,OAMfC,EANe,OAQrBjB,EAAWiB,GACXf,GAAa,GATQ,kDAWrBA,GAAa,GACbE,EAAS,KAAMc,SAZM,0DAAH,qDAgBtBR,MACC,CAACL,IACJc,QAAQC,IAAIrB,GAEV,sBAAKsB,UAAU,yBAAf,UACE,iCACE,cAAC,IAAD,CAAMC,GAAG,IAAT,oBAGDrB,IAAcE,GAAS,iDACvBA,IAAUF,GAAa,CAAEE,SAN5B,OAQGJ,QARH,IAQGA,OARH,EAQGA,EAASQ,KAAI,SAACR,EAASwB,GAAV,OACZ,sBAAKF,UAAU,2BAAf,UACE,qBAAKA,UAAU,oBAAf,SACE,qBAAKG,IAAKzB,EAAQ0B,MAAMC,IAAKC,IAAI,OAGnC,sBAAKN,UAAU,gBAAf,UACE,6BAAKtB,EAAQ6B,KAAKC,SAElB,sBAAKR,UAAU,qBAAf,UACE,6CACc,IACZ,gCACG,IAAIS,KAAKC,cAAeC,OAAOjC,EAAQkC,iBAG5C,0CACU,+BAAOlC,EAAQmC,YAEzB,8CACc,+BAAOnC,EAAQoC,eAE7B,2CACW,+BAAOpC,EAAQqC,mBAI9B,sBAAKf,UAAU,gBAAf,UACE,4BACE,oDAEAtB,EAAQS,QAENT,EAAQS,QAAQD,KAAI,SAAC8B,GACnB,OACE,wBAAQhB,UAAS,gBAAjB,SACE,eAAC,IAAD,CAAMC,GAAG,IAAT,cAAee,EAAf,YAJN,0BA/BuCd,UCrBxCe,MAlBf,WACE,OACE,qCACE,qBAAKjB,UAAU,SAAf,SACE,qBAAKA,UAAU,YAAf,SACE,mEAGJ,qBAAKA,UAAU,YAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOkB,KAAK,IAAIC,QAAS,cAAC,IAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,wBAAwBC,QAAS,cAAC,EAAD,eCTvDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.763d4203.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { apiURL } from \"../util/api\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst CountryInfo = () => {\r\n  const [country, setCountry] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const { countryName } = useParams();\r\n\r\n  const borders = country.map((country) => country.borders);\r\n\r\n  useEffect(() => {\r\n    const getCountryByName = async () => {\r\n      try {\r\n        const res = await fetch(`${apiURL}/name/${countryName}`);\r\n\r\n        if (!res.ok) throw new Error(\"Could not found!\");\r\n\r\n        const data = await res.json();\r\n\r\n        setCountry(data);\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        setIsLoading(false);\r\n        setError(error.message);\r\n      }\r\n    };\r\n\r\n    getCountryByName();\r\n  }, [countryName]);\r\n  console.log(country);\r\n  return (\r\n    <div className=\"country__info__wrapper\">\r\n      <button>\r\n        <Link to=\"/\">Back</Link>\r\n      </button>\r\n\r\n      {isLoading && !error && <h4>Loading........</h4>}\r\n      {error && !isLoading && { error }}\r\n\r\n      {country?.map((country, index) => (\r\n        <div className=\"country__info__container\" key={index}>\r\n          <div className=\"country__info-img\">\r\n            <img src={country.flags.png} alt=\"\" />\r\n          </div>\r\n\r\n          <div className=\"country__info\">\r\n            <h3>{country.name.common}</h3>\r\n\r\n            <div className=\"country__info-left\">\r\n              <h5>\r\n                Population:{\" \"}\r\n                <span>\r\n                  {new Intl.NumberFormat().format(country.population)}\r\n                </span>\r\n              </h5>\r\n              <h5>\r\n                Region: <span>{country.region}</span>\r\n              </h5>\r\n              <h5>\r\n                Sub Region: <span>{country.subregion}</span>\r\n              </h5>\r\n              <h5>\r\n                Capital: <span>{country.capital}</span>\r\n              </h5>\r\n            </div>\r\n          </div>\r\n          <div className=\"b-c-container\">\r\n            <p>\r\n              <b>Border Countries:</b>\r\n            </p>\r\n            {!country.borders\r\n              ? \"No Border Country.\"\r\n              : country.borders.map((border) => {\r\n                  return (\r\n                    <button className={`b-country-btn`}>\r\n                      <Link to=\"/\"> {border} </Link>\r\n                    </button>\r\n                  );\r\n                })}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryInfo;\r\n","import \"./App.css\";\nimport { Routes, Route } from \"react-router-dom\";\nimport AllCountries from \"./components/AllCountries/AllCountries\";\nimport CountryInfo from \"./components/CountryInfo/CountryInfo\";\n\nfunction App() {\n  return (\n    <>\n      <div className=\"header\">\n        <div className=\"container\">\n          <h5>Let's get familiar with world</h5>\n        </div>\n      </div>\n      <div className=\"container\">\n        <Routes>\n          <Route path=\"/\" element={<AllCountries />} />\n          <Route path=\"/country/:countryName\" element={<CountryInfo />} />\n        </Routes>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}